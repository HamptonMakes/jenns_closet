{"version":3,"sources":["serviceWorker.ts","Button.tsx","ImageDisplayArea.tsx","SelectorDisplay.tsx","api/getStyles.tsx","Mismatch.tsx","App.tsx","AppWrapper.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Button","props","className","activated","react_default","a","createElement","style","width","height","onClick","text","ImageDisplayArea","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","index","handleFastForward","bind","assertThisInitialized","handlePlay","handleRewind","styles","length","map","hash","Md5","init","slice","src","concat","key","setState","carouselWidth","offset","marginLeft","renderImages","src_Button_0","Component","tops","shuffle","bottoms","SelectorDisplay","src_ImageDisplayArea_0","Mismatch","App","showMismatched","_this2","src_SelectorDisplay_0","src_Mismatch_0","AppWrapper","src_App_0","ReactDOM","render","src_AppWrapper","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4SAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kGCYSC,eA3BA,SAACC,GAOd,IAAIC,EAAY,SAIhB,OAHID,EAAME,YACRD,GAAa,WAGbE,EAAAC,EAAAC,cAAA,KACEJ,UAAWA,EACXK,MAAO,CACLC,MAAOP,EAAMO,MACbC,OAAQR,EAAMQ,QAEhBC,QAAST,EAAMS,SAEfN,EAAAC,EAAAC,cAAA,OAAKJ,UAAU,gBACbE,EAAAC,EAAAC,cAAA,KAAGJ,UAAU,QAAQD,EAAMU,oDCsDpBC,cAlEb,SAAAA,EAAYX,GAA8B,IAAAY,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACxCC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMf,KAEDmB,MAAQ,CACXC,MAAO,GAETR,EAAKS,kBAAoBT,EAAKS,kBAAkBC,KAAvBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACzBA,EAAKY,WAAaZ,EAAKY,WAAWF,KAAhBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAClBA,EAAKa,aAAeb,EAAKa,aAAaH,KAAlBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KARoBA,8EAY3BG,KAAKf,MAAM0B,OAAOC,OAC/B,OAAOC,cAAIb,KAAKf,MAAM0B,OAAQ,SAACpB,GAC7B,IAAMuB,EAAOC,IAAIC,KAAKzB,GAAO0B,MAAM,EAAG,GAChCC,EAAG,uDAAAC,OAA0DL,EAA1D,KAAAK,OAAkE5B,EAAlE,QACT,OACEH,EAAAC,EAAAC,cAAA,OAAKJ,UAAU,kCAAkCkC,IAAK7B,GACpDH,EAAAC,EAAAC,cAAA,OAAK4B,IAAKA,mDAOZlB,KAAKI,MAAMC,MAAQL,KAAKf,MAAM0B,OAAOC,OAAS,EAChDZ,KAAKqB,SAAS,CAAEhB,MAAOL,KAAKI,MAAMC,MAAQ,IAE1CL,KAAKqB,SAAS,CAAEhB,MAAO,2CAKrBL,KAAKI,MAAMC,MAAQ,EACrBL,KAAKqB,SAAS,CAAEhB,MAAOL,KAAKI,MAAMC,MAAQ,IAE1CL,KAAKqB,SAAS,CAAEhB,MAAOL,KAAKf,MAAM0B,OAAOC,OAAS,2EAOpD,IAAMU,EAA2C,GAA3BtB,KAAKf,MAAM0B,OAAOC,OAClCW,EAAS,GAAKvB,KAAKI,MAAMC,MAC/B,OACEjB,EAAAC,EAAAC,cAAA,OAAKJ,UAAU,oBACbE,EAAAC,EAAAC,cAAA,OACEJ,UAAU,4BACVK,MAAO,CACLC,MAAO8B,EAAgB,KACvBE,WAAU,IAAAL,OAAMI,EAAN,QAGXvB,KAAKyB,gBAERrC,EAAAC,EAAAC,cAAA,OAAKJ,UAAU,4BACbE,EAAAC,EAAAC,cAACoC,EAAD,CAAQ/B,KAAK,KAAKD,QAASM,KAAKU,eAChCtB,EAAAC,EAAAC,cAACoC,EAAD,CAAQ/B,KAAK,IAAID,QAASM,KAAKS,aAC/BrB,EAAAC,EAAAC,cAACoC,EAAD,CAAQ/B,KAAK,KAAKD,QAASM,KAAKM,6BA5DXqB,aCN3BhB,ECFK,CACLiB,KAAMC,kBAAQ,CACZ,QACA,OACA,QACA,OACA,QACA,QACA,OACA,QACA,QACA,QACA,OACA,QACA,QACA,OACA,QACA,UAEFC,QAASD,kBAAQ,CACf,OACA,QACA,QACA,QACA,OACA,OACA,OACA,OACA,OACA,UDdSE,mLATX,OACE3C,EAAAC,EAAAC,cAAA,OAAKJ,UAAU,mBACbE,EAAAC,EAAAC,cAAC0C,EAAD,CAAkBrB,OAAQA,EAAOiB,OACjCxC,EAAAC,EAAAC,cAAC0C,EAAD,CAAkBrB,OAAQA,EAAOmB,kBALXH,aEIfM,SARE,WACf,OACE7C,EAAAC,EAAAC,cAAA,OAAKJ,UAAU,YACbE,EAAAC,EAAAC,cAAA,OAAKJ,UAAU,gBAAf,iBCyCSgD,cAvCb,SAAAA,EAAYjD,GAAY,IAAAY,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkC,IACtBrC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoC,GAAA/B,KAAAH,KAAMf,KACDmB,MAAQ,CACX+B,gBAAgB,GAHItC,wEAOf,IAAAuC,EAAApC,KACP,OACEZ,EAAAC,EAAAC,cAAA,OAAKJ,UAAU,OACbE,EAAAC,EAAAC,cAAA,UAAQJ,UAAU,cAAlB,mBACAE,EAAAC,EAAAC,cAAA,OAAKJ,UAAU,WACbE,EAAAC,EAAAC,cAAA,OAAKJ,UAAU,gBACbE,EAAAC,EAAAC,cAACoC,EAAD,CACE/B,KAAK,aACLH,MAAO,IACPC,OAAQ,GACRN,WAAW,KAGfC,EAAAC,EAAAC,cAAA,OAAKJ,UAAU,kBACbE,EAAAC,EAAAC,cAAC+C,EAAD,OAEFjD,EAAAC,EAAAC,cAAA,OAAKJ,UAAU,iBACbE,EAAAC,EAAAC,cAACoC,EAAD,CACE/B,KAAK,WACLH,MAAO,IACPC,OAAQ,GACRC,QAAS,kBAAM0C,EAAKf,SAAS,CAAEc,gBAAgB,SAIrD/C,EAAAC,EAAAC,cAAA,UAAQJ,UAAU,eACjBc,KAAKI,MAAM+B,eAAiB/C,EAAAC,EAAAC,cAACgD,EAAD,MAAe,aAlClCX,aCEHY,mLAJX,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,aAFcb,aCGzBc,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAAgBC,SAASC,eAAe,SRmIlD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6df50728.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport \"./Button.scss\";\n\nconst Button = (props: {\n  text: String;\n  width?: number;\n  height?: number;\n  activated?: boolean;\n  onClick?: () => void;\n}) => {\n  let className = \"Button\";\n  if (props.activated) {\n    className += \" Active\";\n  }\n  return (\n    <a\n      className={className}\n      style={{\n        width: props.width,\n        height: props.height\n      }}\n      onClick={props.onClick}\n    >\n      <div className=\"Button-Inner\">\n        <p className=\"Text\">{props.text}</p>\n      </div>\n    </a>\n  );\n};\n\nexport default Button;\n","import React, { Component } from \"react\";\nimport \"./ImageDisplayArea.scss\";\nimport Button from \"./Button\";\nimport { getStyles } from \"./api/getStyles\";\nimport { map } from \"lodash\";\nimport { Md5 } from \"md5-typescript\";\n\ninterface ImageDisplayAreaProps {\n  styles: Array<string>;\n}\n\nclass ImageDisplayArea extends Component<ImageDisplayAreaProps, any> {\n  constructor(props: ImageDisplayAreaProps) {\n    super(props);\n\n    this.state = {\n      index: 0\n    };\n    this.handleFastForward = this.handleFastForward.bind(this);\n    this.handlePlay = this.handlePlay.bind(this);\n    this.handleRewind = this.handleRewind.bind(this);\n  }\n\n  renderImages() {\n    let length = this.props.styles.length;\n    return map(this.props.styles, (style: string) => {\n      const hash = Md5.init(style).slice(0, 2);\n      const src = `https://pc-ap.rtrcdn.com/productimages/nomodel/270x/${hash}/${style}.jpg`;\n      return (\n        <div className=\"ImageDisplayArea-Carousel-Image\" key={style}>\n          <img src={src} />\n        </div>\n      );\n    });\n  }\n\n  handleFastForward() {\n    if (this.state.index < this.props.styles.length - 1) {\n      this.setState({ index: this.state.index + 1 });\n    } else {\n      this.setState({ index: 0 });\n    }\n  }\n\n  handleRewind() {\n    if (this.state.index > 0) {\n      this.setState({ index: this.state.index - 1 });\n    } else {\n      this.setState({ index: this.props.styles.length - 1 });\n    }\n  }\n\n  handlePlay() {}\n\n  render() {\n    const carouselWidth = this.props.styles.length * 48;\n    const offset = 48 * this.state.index;\n    return (\n      <div className=\"ImageDisplayArea\">\n        <div\n          className=\"ImageDisplayArea-Carousel\"\n          style={{\n            width: carouselWidth + \"vw\",\n            marginLeft: `-${offset}vw`\n          }}\n        >\n          {this.renderImages()}\n        </div>\n        <div className=\"ImageDisplayArea-Buttons\">\n          <Button text=\"<<\" onClick={this.handleRewind} />\n          <Button text=\">\" onClick={this.handlePlay} />\n          <Button text=\">>\" onClick={this.handleFastForward} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ImageDisplayArea;\n","import React, { Component } from \"react\";\nimport \"./SelectorDisplay.scss\";\nimport { getStyles } from \"./api/getStyles\";\nimport ImageDisplayArea from \"./ImageDisplayArea\";\n\nlet styles = getStyles();\n\nclass SelectorDisplay extends Component {\n  render() {\n    return (\n      <div className=\"SelectorDisplay\">\n        <ImageDisplayArea styles={styles.tops} />\n        <ImageDisplayArea styles={styles.bottoms} />\n      </div>\n    );\n  }\n}\n\nexport default SelectorDisplay;\n","import { shuffle } from \"lodash\";\n\nexport function getStyles() {\n  return {\n    tops: shuffle([\n      \"RMB33\",\n      \"GA33\",\n      \"SMY22\",\n      \"AN23\",\n      \"SLR51\",\n      \"ALC47\",\n      \"OC92\",\n      \"SLR61\",\n      \"NLS65\",\n      \"MRW47\",\n      \"CS78\",\n      \"NM312\",\n      \"PPL31\",\n      \"UNW3\",\n      \"TNT39\",\n      \"NM344\"\n    ]),\n    bottoms: shuffle([\n      \"RZ93\",\n      \"DL193\",\n      \"SBL27\",\n      \"TYB32\",\n      \"AX94\",\n      \"HP90\",\n      \"FP78\",\n      \"PBO8\",\n      \"PLL7\",\n      \"DJ24\"\n    ])\n  };\n}\n","import React from \"react\";\nimport \"./Mismatch.scss\";\n\nconst Mismatch = () => {\n  return (\n    <div className=\"Mismatch\">\n      <div className=\"Mismatch-Box\">MIS-MATCH!</div>\n    </div>\n  );\n};\n\nexport default Mismatch;\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.scss\";\nimport Button from \"./Button\";\nimport SelectorDisplay from \"./SelectorDisplay\";\nimport Mismatch from \"./Mismatch\";\n\nclass App extends Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      showMismatched: false\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-Header\">JENN'S WARDROBE</header>\n        <div className=\"Content\">\n          <div className=\"Content-Left\">\n            <Button\n              text=\"AUTO DRESS\"\n              width={170}\n              height={95}\n              activated={true}\n            />\n          </div>\n          <div className=\"Content-Center\">\n            <SelectorDisplay />\n          </div>\n          <div className=\"Content-Right\">\n            <Button\n              text=\"DRESS ME\"\n              width={170}\n              height={95}\n              onClick={() => this.setState({ showMismatched: true })}\n            />\n          </div>\n        </div>\n        <footer className=\"App-Footer\" />\n        {this.state.showMismatched ? <Mismatch /> : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\nimport App from \"./App\";\n\nclass AppWrapper extends Component {\n  render() {\n    return <App />;\n  }\n}\n\nexport default AppWrapper;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport AppWrapper from \"./AppWrapper\";\n\nReactDOM.render(<AppWrapper />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}